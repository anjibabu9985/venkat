{"version":3,"sources":["Img/logo.png","Img/bg.jpg","logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","_searchButton","searchButton","width","alignItems","position","right","top","height","background","border","padding","cursor","display","Object","defineProperty","react_default","a","createElement","className","style","float","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","src","ImgVar","minHeight","minWidth","left","zIndex","paddingTop","paddingBottom","Logo","alt","borderRadius","placeholder","class","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0GCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,8NCmGzBC,mLA7FJ,IAAAC,EA0BHC,GAAYD,EAAA,CACdE,MAAO,OACPC,WAAY,SACZC,SAAU,WACVC,MAAO,EACPC,IAAK,EACLC,OAAQ,OACRC,WAAY,cACZC,OAAQ,EACRC,QAAS,EACTC,OAAQ,UACRC,QAAS,QAXKC,OAAAC,EAAA,EAAAD,CAAAb,EAAA,SAYN,QAZMa,OAAAC,EAAA,EAAAD,CAAAb,EAAA,UAaL,QAbKa,OAAAC,EAAA,EAAAD,CAAAb,EAAA,iBAcE,UAdFA,GAiBhB,OACEe,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wCAAwCC,MAAO,CAAEC,MAAO,UAEnEL,EAAAC,EAAAC,cAAA,UAAQC,UAAU,kBAAkBG,KAAK,SAASC,cAAY,WAAWC,cAAY,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBACzJX,EAAAC,EAAAC,cAAA,QAAMC,UAAU,yBAEpBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BAA4BS,GAAG,aAC1CZ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,kBAMtBH,EAAAC,EAAAC,cAAA,OAAKW,IAAKC,IAAQV,MAxDT,CAETW,UAAW,OACXC,SAAU,SAGV7B,MAAO,OACPK,OAAQ,OAGRH,SAAU,QACVE,IAAK,EACL0B,KAAM,EACNC,QAAS,KA6CTlB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,0BAA0BC,MAvC/B,CAEbe,WAAY,OACZC,cAAe,UAsCXpB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,OAAKW,IAAKQ,IAAMC,IAAI,gBAGxBtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAAd,qBACAH,EAAAC,EAAAC,cAAA,mCAGJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uCACXH,EAAAC,EAAAC,cAAA,YACIF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACXH,EAAAC,EAAAC,cAAA,SAAOI,KAAK,OAAOH,UAAU,+BAA+BC,MAAO,CAAEmB,aAAc,QAAUC,YAAY,wBACzGxB,EAAAC,EAAAC,cAAA,UAAQI,KAAK,SAASmB,MAAM,eAAerB,MAAOlB,GAC9Cc,EAAAC,EAAAC,cAAA,KAAGuB,MAAM,iCA/E7BC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SDmH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a06d20b0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.f96223f8.png\";","module.exports = __webpack_public_path__ + \"static/media/bg.16ec5dc0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Logo from './Img/logo.png'\nimport ImgVar from './Img/bg.jpg';\nclass App extends Component {\n  render() {\n    const bg = {\n      /* Set rules to fill background */\n      minHeight: \"100%\",\n      minWidth: \"1024px\",\n\n      /* Set up proportionate scaling */\n      width: \"100%\",\n      height: \"auto\",\n\n      /* Set up positioning */\n      position: \"fixed\",\n      top: 0,\n      left: 0,\n      zIndex: -1\n  };\n\n\n\n\n  const masthead = {\n\n      paddingTop: \"8rem\",\n      paddingBottom: \"12rem\",\n  };\n\n  const searchButton = {\n      width: \"70px\",\n      alignItems: \"center\",\n      position: \"absolute\",\n      right: 0,\n      top: 0,\n      height: \"100%\",\n      background: \"transparent\",\n      border: 0,\n      padding: 0,\n      cursor: \"pointer\",\n      display: \"flex\",\n      border: \"none\",\n      outline: \"none\",\n      justifyContent: \"center\"\n\n  }\n    return (\n      <div className=\"container\" >\n      <nav className=\"navbar  navbar-expand-lg navbar-light\" style={{ float: \"right\" }}>\n\n          <button className=\"navbar-toggler \" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n              <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse \" id=\"navbarNav\" >\n              <ul className=\"navbar-nav \" >\n                \n\n              </ul>\n          </div>\n      </nav>\n      <img src={ImgVar} style={bg} />\n\n      <header className=\" text-white text-center\" style={masthead}>\n\n          <div className=\"container\">\n              <div className=\"row\">\n                  <div className=\"col-xl-9 mx-auto\">\n                      <img src={Logo} alt=\"joey rooms\"></img>\n\n                  </div>\n                  <div className=\"col-xl-9 mx-auto\">\n                      <h1 className=\"mb-10\">Set Your Location</h1>\n                      <h4>Find Your Ideal Home</h4>\n                  </div>\n\n                  <div className=\"col-md-10 col-lg-8 col-xl-7 mx-auto\">\n                      <form>\n                          <div className=\"form-row\">\n                              <div className=\"col-xl-9 mx-auto\">\n                                  <input type=\"text\" className=\"form-control form-control-lg\" style={{ borderRadius: \"2rem\" }} placeholder=\"Example : Hyderabad\" />\n                                  <button type=\"submit\" class=\"searchButton\" style={searchButton}>\n                                      <i class=\"fa fa-search\"></i>\n                                  </button>\n                              </div>\n\n                          </div>\n                      </form>\n                  </div>\n              </div>\n          </div>\n      </header>\n  </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}